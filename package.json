{
  "name": "ng",
  "description": "full-stack angular with no dependencies",
  "keywords": [
    "ng",
    "angular"
  ],
  "author": {
    "name": "Adam Kircher"
  },
  "email": "adam.kircher@gmail.com",
  "version": "0.0.1-experimental7",
  "scripts": {
    "start": "node server.js"
  },
  "readme": "# ng (warning! pre-alpha)\n### full-stack angular with no dependencies\n\nWith node.js came full-stack javascript. However, developers still had to use\r\ndifferent frameworks to build frontend apps and their backend apis. Enter ng,\r\nnow there is an elegant, full-stack AngularJS framework with no other dependencies\r\n\r\nWhile still in pre-alpha, ng is being built for production environments with sponsorship\r\nby Pook-n-Cheek.  If you are interested in contributing to the project, email adam at adam.kircher@gmail.com\r\n\r\n## example\n```javascript\r\n//Enter in the url or file path of module dependencies. ng will load them first\r\nvar modules =\r\n{\r\n\tng:'//ajax.googleapis.com/ajax/libs/angularjs/1.2.6/angular.js', \r\n\tngRoute:'node_modules/ng.cdn/1.2.0-route.js' \r\n}\r\n\r\nrequire('ng')(modules, function(ng)\r\n{\r\n\t//ng is a listener that accepts a request & reponse\r\n\trequire('http').createServer(ng).listen(1337)\r\n\r\n\t//Just like most node.js frameworks ng uses a stack of middleware\r\n\t//however its middleware uses Angular's interceptor API. Valid\r\n\t//properties include request, requestError, response, responseError\r\n\t//The example below sends an app's base template if the response has no data\r\n\tng.stack(function()\r\n\t{\r\n\t\treturn {\r\n\r\n\t\t\tresponse:function(data)\r\n\t\t\t{\r\n\t\t\t\t//ng.toString() will concatenate all modules, replacing\r\n\t\t\t\t//the need to specify each one manually.  To do it the\r\n\t\t\t\t//manual way replace ng with the three lines below:\r\n\t\t\t\t//'<script>'+ng.module('ng')+'</script>',\r\n\t\t\t\t//'<script>'+ng.module('ngRoute')+'</script>',\r\n\t\t\t\t//'<script>'+ng.module('example')+'</script>',\r\n\t\t\t\treturn data ||\r\n\t\t\t\t[\r\n\t\t\t\t\t\"<html ng-app='example'>\",\r\n\t\t\t\t\t\t\"<head>\",\r\n\t\t\t\t\t\t\tng,\r\n\t\t\t\t\t\t\"</head>\",\r\n\t\t\t\t\t\t\"<body>\",\r\n\t\t\t\t\t\t\t\"<div class='ng-view'></div>\",\r\n\t\t\t\t\t\t\"</body>\",\r\n\t\t\t\t\t\"</html>\"\r\n\t\t\t\t]\r\n\t\t\t\t.join('\\n')\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\r\n\t//Now we are done with ng specifics, the rest of our app looks\r\n\t//almost exactly like angular!!!  Look carefully to spot some\r\n\t//nodejs specific functions like require/readFile/__dirname etc.\r\n\t.module('example', ['ngRoute'])\r\n\r\n\t//Because it has a require, this factory will be placed the server.\r\n\t//If you access from the client - e.g., in a controller - then ng\r\n\t//will send an http request run the function on the server and\r\n\t//return the result, so it will look like it was run on the client\r\n\t.factory('$os', function($http, $cpus)\r\n\t{\r\n\t\tvar os = require('os')\r\n\r\n\t\treturn [os.cpus, os.cpus]\r\n\t})\r\n\r\n\t//This factory will be put on server and client\r\n\t//it will be run from whereever it is accessed\r\n\t.factory('me', function(us) { return 'hi' })\r\n\r\n\t//Easily import 3rd party code such as a db factory/directive\r\n\t.factory('db', require('ng.cql').factory)\r\n\r\n\t.directive('db', require('ng.cql').directive)\r\n\r\n\t//Controllers are automatically put on the client\r\n\t.controller('base', function($scope, $os, $cpus, $http, db)\r\n\t{\r\n\t\t$scope.test = db('test').select('*')\r\n\r\n\t\t$scope.os = $os[1]()\r\n\r\n\t\t$scope.version = ng.version\r\n\t})\r\n\r\n\t//Configs/runs are put on client and server. We make an exception\r\n\t//for templates, where the template parser will run the template\r\n\t//on the server (readFileSync in this case) and push that result\r\n\t//to the client config.  All config/runs are put on client as-is\r\n\t.config(function($routeProvider, $locationProvider)\r\n\t{\r\n\t\t$routeProvider\r\n\r\n\t\t.when('/george', {\r\n\t\t\ttemplate: require('fs').readFileSync('view/george.html'),\r\n\t\t\tcontroller: 'base'\r\n\t\t})\r\n\r\n\t\t.when('/adam',\r\n\t\t{\r\n\t\t\ttemplate:require('fs').readFileSync('view/adam.html'),\r\n\t\t\tcontroller: 'base'\r\n\t\t})\r\n\r\n\t\t$locationProvider.html5Mode(true);\r\n\t})\r\n\r\n\t//OPTIONAL ADVANCED USAGE\r\n\r\n\t//Internally ng pre-processes your module code, this functionality\r\n\t//is added to the public api as ng.parse(), allowing cool things like\r\n\t//automatically creating angularjs's inline injection array,\r\n\t//or making your code pretty with automatic indentation.\r\n\t//Include these stock parsers by specifying 'inline' and/or 'whitespace'\r\n\tng.parse('inline').parse('whitespace')\r\n\r\n\t//Make your own custom parsers using the function signature below\r\n\t//For more example's look at the stock parsers in parser.js\r\n\t//.parse.client() and .parse.server() provide more granularity\r\n\t.parse(function(fn, type, name)\r\n\t{\r\n\t\t//Uncomment lines below to see how a custom parser works\r\n\t\t//console.log('I am parsing', type, name)\r\n\t\t//console.log('Function to parse & return', fn.toString())\r\n\t\t//console.log('Module API available as this', this)\r\n\t\treturn fn  //I didn't do anything, kept function as-is\r\n\t})\r\n})\n```\n\n##todos\n- Many, many ideas.  Feel free to email me suggestions!\n- Rpc requests need to have authentication hash\r\n- More stock middleware, gzip etc, and more stock parsers\r\n- Testing API\r\n- Make namespace use self-executing function rather than setting a global var\r\n\r\n##related projects\r\n- ng.seed: create a modular ng application using npm packages \r\n- ng.cql: realtime cassandra database syncing\r\n",
  "readmeFilename": "readme.md",
  "_id": "ng@0.0.1-experimental7",
  "_from": "ng@*"
}
